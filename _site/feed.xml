<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>newlifebegins</title>
    <description>fullstack web developer
</description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Nov 2018 16:38:11 +0800</pubDate>
    <lastBuildDate>Thu, 22 Nov 2018 16:38:11 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>jekyll安装运行</title>
        <description>&lt;h6 id=&quot;既然都看到这篇文章了想必也对jekyll有所了解我也是新手将自己遇到的一些问题分享出来希望能对大家有帮助&quot;&gt;既然都看到这篇文章了，想必也对jekyll有所了解，我也是新手，将自己遇到的一些问题分享出来，希望能对大家有帮助。&lt;/h6&gt;

&lt;h3 id=&quot;步骤&quot;&gt;步骤&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;安装 Ruby&lt;/li&gt;
  &lt;li&gt;安装 DevKit&lt;/li&gt;
  &lt;li&gt;安装 Jekyll&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1安装-ruby&quot;&gt;1、安装 Ruby&lt;/h1&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;https://rubyinstaller.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/2018-11-22_124443.png&quot; alt=&quot;ruby&quot; title=&quot;ruby&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意版本要选 2.3，本文使用的是：rubyinstaller-2.3.3-x64&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/20180209145741879.png&quot; alt=&quot;path&quot; title=&quot;path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果是第一次安装，推荐默认路径，不要乱改路径，避免一些不必要的问题，比如我的路径是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Ruby23-x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装的时候注意勾选把ruby添加到路径PATH，如果不勾选也可以手动添加
例如，按照我的路径，就应该添加：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Ruby23-x64\bin;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;检查ruby是否正常安装，会出现版本号&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -v
ruby 2.3.3p222 (2016-11-21 revision 56859) [x64-mingw32]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2安装devkit&quot;&gt;2、安装DevKit&lt;/h1&gt;

&lt;p&gt;回到刚刚的下载 ruby 的页面，往下滑。。。
下载 DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/20180209162815496.png&quot; alt=&quot;DevKit&quot; title=&quot;DevKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解压文件，路径不要太长，推荐：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\DevKit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入目录，初始化&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby dk.rb init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打开 config.yml 添加&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:/Ruby22-x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;依次执行以下命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby dk.rb review  # 审查（非必须）

ruby dk.rb install  # 安装

gem -v  # 查看gem是否正常安装
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../../../images/20180209163206604.png&quot; alt=&quot;bash&quot; title=&quot;bash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;均无报错，ok&lt;/p&gt;

&lt;h1 id=&quot;3安装jekyll&quot;&gt;3、安装jekyll&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试一下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll --version
jekyll 3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;新建项目&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果没有任何报错，会在当前目录下回生产一个 myblog 文件夹
&lt;img src=&quot;../../../images/2018-11-22_131209.png&quot; alt=&quot;myblog&quot; title=&quot;myblog&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;4运行服务器&quot;&gt;4、运行服务器&lt;/h1&gt;

&lt;p&gt;进入 myblog 文件夹，运行服务器&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd myblog
myblog&amp;gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;访问测试：&lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;
&lt;img src=&quot;../../../images/20180209160150711.png&quot; alt=&quot;myblog&quot; title=&quot;myblog&quot; /&gt;
一切都很完美，不过这才刚刚开始。。。&lt;/p&gt;
&lt;h1 id=&quot;5遇到的问题&quot;&gt;5、遇到的问题&lt;/h1&gt;

&lt;p&gt;运行：gem install jekyll 时报错&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dependency Error: Yikes! It looks like you don’t have jekyll-paginate or one of its dependencies installed. In order to use Jekyll as currently configured, you’ll need to install this gem. The full error message from Ruby is: ‘cannot load such file – jekyll-paginate’ If you run into trouble, you can find helpful resources at Getting Help

jekyll 3.1.2 | Error: jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;解决办法：安装jekyll时候直接运行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即可解决。&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/jekyll/2018/11/22/jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/jekyll/2018/11/22/jekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        <category>DevKit</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>解决webpack打包后-webkit-box-orient被移除问题</title>
        <description>&lt;p&gt;[产生原因] : autoprefixer自动移除老式过时的代码&lt;/p&gt;

&lt;h2 id=&quot;解决&quot;&gt;[解决]&lt;/h2&gt;
&lt;h3 id=&quot;方法一-添加注释关闭autoprefixer但是若果有清除注释的插件请将该插件设为false否则不生效&quot;&gt;方法一: 添加注释关闭autoprefixer,但是若果有清除注释的插件,请将该插件设为false,否则不生效&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* autoprefixer: off */
-webkit-box-orient: vertical;
/* autoprefixer: on */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;方法二将autoprefixer设置为false或者只是将移除功能关闭&quot;&gt;方法二:将autoprefixer设置为false,或者只是将移除功能关闭&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoprefixer:{remove:false}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是cssnano里会有对autoprefixer的配置,而在使用webpack进行css压缩时有使用到optimize-css-assets-webpack-plugin插件,而这个插件实际上就是依靠cssnano来实现其功能,所以我们需要修改插件的配置(如下)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')
 new OptimizeCSSPlugin({
     cssProcessorOptions: {
         safe: true, map: { inline: false },
         autoprefixer: { remove: false }  //添加对autoprefixer的配置

    }
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2018/10/30/webpack.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/30/webpack.html</guid>
        
        <category>webpack</category>
        
        <category>css3</category>
        
        
      </item>
    
      <item>
        <title>关于vue项目打包后提示图片文件路径错误的解决方法</title>
        <description>&lt;p&gt;vue项目打包后在production模式下提示图片 ‘404（not found），在dev环境下好好的，打包了就提示这个错误。这是为什么呢，以前第一次使用vue-cli构建项目的的时候只有两个图片文件，当时部署后报错路径问题， 当时的想法就是简单粗暴，直接在build好的文件修改了文件路径，再后来项目中遇到了一大堆静态资源，修改路径显然是不行的，看了一下生成文件大概知道是文件目录改变了，所以引用的路径也要随之改变，网上最简单的方法是修改 ‘config/index.js’文件中的 build模块：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// emplate for index.html
 index: path.resolve(__dirname, '../dist/index.html'),
 // Paths
 assetsRoot: path.resolve(__dirname, '../dist'),
 assetsSubDirectory: 'static',
 assetsPublicPath: './',
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将默认的改为上文这样子，静态文件目录改为static，静态路径改为‘./’，即相对路径。 ok了？
试了一下还是有404，当时想到的就是难道只能在组件data中以“require”的方式一个一个的引入了吗？ 这个属于js中以模块引入方式确实可行，但是太繁琐，想一下，使用这张图的时候在html文档结构中以 “:bind”的方式将资源以code的方式加在html文档中，不是说这样不行，这样也是可以实现想要的效果的，但是这样做会导致不仅文档结构不清晰，冗余度高，维护起来麻烦，而且资源很多的时候这是一项庞大且繁琐的工作，徒增加无用功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-这样第三种方法应用而生，就是修改‘build’目录下的utils.js文件，将文件中的“generateLoaders”函数改为：&quot;&gt;pluginfunction generateLoaders (loader, loaderOptions) {
    const loaders = options.usePostCSS ?
     [cssLoader,     postcssLoader] : [cssLoader]

    if (loader) {
      loaders.push({
        loader: loader + '-loader',
        options: Object.assign({}, loaderOptions, {
          sourceMap: options.sourceMap
        })
      })
    }

    // Extract CSS when that option is specified
    // (which is the case during production build)
    if (options.extract) {
      return ExtractTextPlugin.extract({
        use: loaders,
        fallback: 'vue-style-loader',
        publicPath:'../../'                  //add
      })
    } else {
      return ['vue-style-loader'].concat(loaders)
    }
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重点是if…else判断中的那个”publicPath:’../../’ ”
build一下，部署在服务端，ok可行，这样就可以愉快的在style中使用图片资源了。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2018/10/29/vue.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/29/vue.html</guid>
        
        
      </item>
    
      <item>
        <title>vuex</title>
        <description>&lt;pre&gt;&lt;code class=&quot;language-Vuex是什么？&quot;&gt;1.Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。
2.它采用集中式存储管理应用的所有组件的状态，
3.并以相应的规则保证状态以一种可预测的方式发生变化
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通俗理解&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、vuex就是在vue中创建全局变量的东西
2、vuex提供了一些优雅的方法，可以让我们改变全局变量的值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;怎么去用Vuex？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-使用vuex的方式非常非常简单，我们只需要记住几个核心的概念就可以。&quot;&gt;1、this.$store ： 我们可以通过 this.$store 在vue的组件中获取 
vuex的实例。

2、State ： vuex中的数据源，我们可以通过 this.$store.state 获取
我们在vuex中声明的全局变量的值。

3、Getter： 相当于vue中的computed ， 及 计算属性， 可以用于监听、
计算 state中的值的变化

4、Mutation： vuex中去操作数据的方法 （只能同步执行）

5、Action： 用来操作 Mutation 的动作 ， 他不能直接去操作数据源，
但可以把mutation变为异步的

6、Module： 模块化，当你的应用足够大的时候，你可以把你的vuex分成多个
子模块

&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 25 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2018/10/25/vuex.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/25/vuex.html</guid>
        
        
      </item>
    
      <item>
        <title>时间日期获取</title>
        <description>&lt;h2 id=&quot;时间日期获取&quot;&gt;时间日期获取&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myDate = new Date();
myDate.getYear();        //获取当前年份(2位)
myDate.getFullYear();    //获取完整的年份(4位,1970-????)
myDate.getMonth();       //获取当前月份(0-11,0代表1月)
myDate.getDate();        //获取当前日(1-31)
myDate.getDay();         //获取当前星期X(0-6,0代表星期天)
myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)
myDate.getHours();       //获取当前小时数(0-23)
myDate.getMinutes();     //获取当前分钟数(0-59)
myDate.getSeconds();     //获取当前秒数(0-59)
myDate.getMilliseconds();    //获取当前毫秒数(0-999)
var time = myDate.toLocaleTimeString();     //获取当前时间
var date = myDate.toLocaleDateString();     //获取当前日期
var dateTime = myDate.toLocaleString( );        //获取日期与时间
var Week = ['日','一','二','三','四','五','六'];
var w = Week[time.getDay()];

// 日期时间格式化函数
function add0(m){return m&amp;lt;10?'0'+m:m }
function format(){
    var Week = ['日','一','二','三','四','五','六'];
    var time = new Date();
    var y = time.getFullYear();
    var m = time.getMonth()+1;
    var d = time.getDate();
    var w = Week[time.getDay()];
    var h = time.getHours();
    var mm = time.getMinutes();
    var s = time.getSeconds();
    return y+'年'+add0(m)+'月'+add0(d)+'日&amp;amp;nbsp;&amp;amp;nbsp;星期'+w+'&amp;amp;nbsp;&amp;amp;nbsp;'+add0(h)+':'+add0(mm)+':'+add0(s);
}
结果 =&amp;gt; 2017年12月27日  星期三  13:59:47
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 27 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/12/27/dateTime.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/12/27/dateTime.html</guid>
        
        
      </item>
    
      <item>
        <title>vue框架快速搭建</title>
        <description>&lt;h2 id=&quot;vue-安装&quot;&gt;vue 安装&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm config set proxy null
$ npm config set https-proxy null
$ npm config set strict-ssl false
$ npm config set registry http://registry.cnpmjs.org
$ npm install --global vue-cli
$ vue init webpack vue
$ cd vue
$ npm install
$ npm run dev
在浏览器中打开 http://localhost:8000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/07/26/vue.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/07/26/vue.html</guid>
        
        
      </item>
    
      <item>
        <title>react框架快速搭建</title>
        <description>&lt;h2 id=&quot;react-安装&quot;&gt;React 安装&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我们建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack，本教程使用 webpack。
国内使用 npm 速度很慢，你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:
$ npm install -g cnpm --registry=https://registry.npm.taobao.org
$ npm config set registry https://registry.npm.taobao.org
这样就可以使用 cnpm 命令来安装模块了：
$ cnpm install [name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用-create-react-app-快速构建-react-开发环境&quot;&gt;使用 create-react-app 快速构建 React 开发环境&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。
create-react-app 自动创建的项目是基于 Webpack + ES6 。
执行以下命令创建项目：
$ cnpm install -g create-react-app
$ create-react-app my-app
$ cd my-app/
$ npm start
在浏览器中打开 http://localhost:3000/
项目的目录结构如下：
my-app/
  README.md
  node_modules/
  package.json
  .gitignore
  public/
    favicon.ico
    index.html
  src/
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/07/26/react.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/07/26/react.html</guid>
        
        
      </item>
    
      <item>
        <title>前端面试题</title>
        <description>&lt;h2 id=&quot;1前端流式布局和响应式布局&quot;&gt;1、前端流式布局和响应式布局&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;流式布局：网页主要的划分区域的尺寸使用百分数配合max-和min-，但是只是宽度使用百分比，但是高度和文字大小都是用px定义所以在移动端手机上会显示不协调。
响应式布局：使用css3的媒体查询技术，响应式设计的目标是确保一个页面在所有终端上（各种尺寸的PC、手机、手表、冰箱的Web浏览器等等）都能显示出令人满意的效果，对CSS编写者而言，在实现上不拘泥于具体手法，但通常是糅合了流式布局+弹性布局，再搭配媒体查询技术使用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;2纯css编写实心三角形&quot;&gt;2、纯css编写实心三角形&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.dengyao△{
  width: 0;
  height: 0;
  border: 70px solid transparent;
  border-bottom: 70px solid #f33;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3如何水平垂直居中div如何水平垂直居中文字多行&quot;&gt;3、如何水平垂直居中div？如何水平垂直居中文字（多行）？&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.first{
   top: 50%;
   left: 50%;
   margin-left: -200px;
   margin-top: -100px;
 }

.second{
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%);
}

&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;div水平垂直居中&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;table-cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;girl.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;美女&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;                
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype Html&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Html&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;水平垂直居中&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;skyblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; 

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;多行文字居中 多行文字居中 多行文字居中 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Html&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4移动端开发和pc端开发有什么不同各自的注意事项&quot;&gt;4、移动端开发和pc端开发有什么不同？各自的注意事项？&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pc，我们需要考虑什么呢？有点开发经验的同学都知道，ie6-11，firefox，chrome，safari都得兼容的吧
mobile的网页开发，我们需要考虑什么呢？
就目前来说，我们只需要考虑webkit内核的浏览器和chrome，uc，qq，小米手机浏览器就好了。。。
1、pc端有ie,chrome,ff 内核兼容问题移动端，简单来说兼容问题相对较少。但是移动端要做好多分辨率的处理。移动端所有图片和所有html标签的尺寸都要减半。
2、移动端在布局跟js效果方面，与PC端有什么不同：
先说布局方面：
PC端最常用的就是固定宽度980px（也有960，1000,1200），然后水平居中 width:980px;margin:0 auto;但移动端就不能这么用了，因为很多网页都是可以横屏看，也可以竖屏看；很多屏幕的分辨率不一样；
所以只要牵涉到移动端，就要牵涉到响应式（也叫自适应）；如果是只针对移动端的项目，我平时主要考虑的是320px宽 到 750px宽的兼容；
js方面：（有没有canvas，对js影响很大）
第一、普通移动端网页（比如手机新浪网，手机淘宝，手机百度等）这个在js方面和PC端区别不是太大；主要的区别在于移动端没有了鼠标悬停（onmouseover）；点击（onclick）还可以用；多了触摸、滑动（会用一些插件）。
第二、canvas相关游戏canvas相关的html5增加了好多js；

3、手机游览器可能不兼容css3的属性，这时你可以使用以下代码来加强你代码的健壮性
(1)@media screen and (max-width: 355px) { //宽度小于355px时
... 
(2)我们的处理方法是在使用calc()的上面写上普通的样式，例如：width:95%;
width:calc(100% - 10px);
width:-webkit-calc(100% - 10px);
width:-moz-calc(100% - 10px);
当游览器无法读取样式时会使用最上面的widht：95%;这样会与实际设计稿有些许出入，所以使用时谨慎对待~ //添加属性
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5请描述一下sessionstorage和localstorage的区别和用法&quot;&gt;5、请描述一下sessionStorage和localStorage的区别和用法？&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。

他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。

localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。

sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。

不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。

同源的判断规则：

http://www.test.com

https://www.test.com （不同源，因为协议不同）

http://my.test.com（不同源，因为主机名不同）

http://www.test.com:8080（不同源，因为端口不同）

localStorage和sessionStorage使用时使用相同的API：

localStorage.setItem(&quot;key&quot;,&quot;value&quot;);//以“key”为名称存储一个值“value”

localStorage.getItem(&quot;key&quot;);//获取名称为“key”的值

枚举localStorage的方法：

for(var i=0;i&amp;lt;localStorage.length;i++){

     var name = localStorage.key(i)​;

     var value = localStorage.getItem(name);​

}

删除localStorage中存储信息的方法：

localStorage.removeItem(&quot;key&quot;);//删除名称为“key”的信息。

localStorage.clear();​//清空localStorage中所有信息

 通过getItem或直接使用localStorage[&quot;key&quot;]获取到的信息均为实际存储的副本。

例如：

localStorage.key = {value1:&quot;value1&quot;}​;

localStorage.key.value1='a'​;

这里是无法​对实际存储的值产生作用的，下面的写法也不可以：

​localStorage.getItem(&quot;key&quot;).value1=&quot;a&quot;;

setItem存储value

用途：将value存储到key字段
用法：.setItem( key, value)
代码示例：

  sessionStorage.setItem(&quot;key&quot;, &quot;value&quot;);   localStorage.setItem(&quot;site&quot;, &quot;js8.in&quot;);
getItem获取value

用途：获取指定key本地存储的值
用法：.getItem(key)
代码示例：

  var value = sessionStorage.getItem(&quot;key&quot;);  var site = localStorage.getItem(&quot;site&quot;);
removeItem删除key

用途：删除指定key本地存储的值
用法：.removeItem(key)
代码示例：

  sessionStorage.removeItem(&quot;key&quot;);   localStorage.removeItem(&quot;site&quot;);
clear清除所有的key/value

用途：清除所有的key/value
用法：.clear()
代码示例：

  sessionStorage.clear();   localStorage.clear();
其他操作方法：点操作和[]

web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储，像如下的代码：

var storage = window.localStorage; storage.key1 = &quot;hello&quot;; storage[&quot;key2&quot;] = &quot;world&quot;; console.log(storage.key1); console.log(storage[&quot;key2&quot;]);
localStorage和sessionStorage的key和length属性实现遍历

sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：

var storage = window.localStorage; for (var i=0, len = storage.length; i  &amp;lt;  len; i++){     var key = storage.key(i);     var value = storage.getItem(key);     console.log(key + &quot;=&quot; + value); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6简述对mvvm和mvc的理解&quot;&gt;6、简述对mvvm和mvc的理解？&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 MVC模型关注的是Model的不变，所以，在MVC模型里，Model不依赖于View，但是 View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。
MVVM在概念上是真正将页面与数据逻辑分离的模式，它把数据绑定工作放到一个JS里去实现，而这个JS文件的主要功能是完成数据的绑定，即把model绑定到UI的元素上。
此外，MVVM另一个重要特性，双向绑定。它更方便你同时维护页面上都依赖于某个字段的N个区域，而不用手动更新它们。例如：angular.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/05/17/timu.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/05/17/timu.html</guid>
        
        
      </item>
    
      <item>
        <title>css3例子</title>
        <description>&lt;dl id=&quot;content&quot;&gt;
&lt;/dl&gt;

&lt;script&gt;
var data = {
            &quot;边框和背景&quot;:{
              &quot;半透明边框&quot;: &quot;012289cc14106a1bd7a5&quot;,
              &quot;多重边框&quot;: &quot;525eb8e9cdade71723c1&quot;,
              &quot;背景定位1&quot;: &quot;0f226e63595d1bef88cb&quot;,
              &quot;背景定位2&quot;: &quot;0f19ac5d28d0aa7b6c60&quot;,
              &quot;背景定位3&quot;: &quot;b5fcb42d055427ab6c1a&quot;,
              &quot;边框内圆角&quot;: &quot;170fe436f290083cc24c&quot;,
              &quot;水平条纹&quot;: &quot;119dbf7f0c76dba7b7ee&quot;,
              &quot;垂直条纹&quot;: &quot;1b4983062fd2b4d7e60e&quot;,
              &quot;对角条纹&quot;: &quot;abeab80934fc26e6538e&quot;,
              &quot;对角条纹60度&quot;: &quot;5646121210b0c99c94a7&quot;,
              &quot;复杂条纹&quot;: &quot;aa50d296a8ec07cf7334&quot;,
              &quot;蓝网格图&quot;: &quot;43bde2086e9d549fb844&quot;,
              &quot;圆点图&quot;: &quot;cd33da5d1a48046746cd&quot;,
              &quot;棋盘图&quot;: &quot;4f7ca0749582b1bd7527&quot;,
              &quot;棋盘图-svg&quot;: &quot;5d3cacead6f134da842e&quot;,
              &quot;旋转动画&quot;: &quot;ea53f3bee9a7f1439aa7&quot;,
              &quot;随机条纹&quot;: &quot;4b4ad05f4c1b5259066f&quot;,
              &quot;边框图片&quot;: &quot;c73fd4ea4b592a05c004&quot;,
              &quot;连续的边框图片&quot;: &quot;55b5f131c45702a55684&quot;,
              &quot;古老的信封背景实现&quot;: &quot;e3cfcb094e65d85df847&quot;,
              &quot;古老的信封边框实现&quot;: &quot;0f6900d370f55ec9c975&quot;,
              &quot;行进的蚂蚁&quot;: &quot;f26dddc71730c3847153&quot;,
              &quot;页脚&quot;: &quot;9483cc7012049f2c808e&quot;,
            },


            &quot;形状&quot;:{
              &quot;椭圆&quot;: &quot;aada0b96b21ae3e45c1b&quot;,
              &quot;半椭圆&quot;: &quot;e98d11da331bd9482bb0&quot;,
              &quot;4分之一椭圆&quot;: &quot;2b75df0e72c9804e8abe&quot;,
              &quot;平行四边形&quot;: &quot;e1f72639c34a5578dda3&quot;,
              &quot;利用伪元素的平行四边形&quot;: &quot;f2d98791ab1f0b238aa9&quot;,
              &quot;钻石图片&quot;: &quot;7563400&quot;,
              &quot;钻石图片效果&quot;: &quot;c62456fed36a524b8273&quot;,
              &quot;四角直切图片&quot;: &quot;2937c990d6bfad274740&quot;,
              &quot;四角圆切图片&quot;: &quot;24484257bc6cf7076a8e&quot;,
              &quot;使用边框的切角&quot;: &quot;365c867441f3ee298212&quot;,
              &quot;平行四边形选项卡&quot;: &quot;1345dc9399dc8e794502&quot;,
              &quot;圆饼动画&quot;: &quot;722909b9808c14eb7300&quot;,
              &quot;静止饼图&quot;: &quot;66e1e52ac2a44ad87aa4&quot;,
              &quot;五彩流动&quot;: &quot;e324a92d31b7f67da5c0&quot;,
              &quot;svg饼动画&quot;: &quot;4696e4c6700fe9f346d8&quot;,
            },

            &quot;视觉效果&quot;:{
              &quot;一侧阴影&quot;: &quot;cc055dadf493c15723cf&quot;,
              &quot;双侧阴影&quot;: &quot;d29d19ab66177b18bd64&quot;,
              &quot;反向阴影&quot;: &quot;a23e445fca36293d12f6&quot;,
              &quot;投影滤镜&quot;: &quot;d8a2376c79906d68f3d1&quot;,
              &quot;图片滤镜&quot;: &quot;b338c9940a31b727b7a9&quot;,
              &quot;变色的老虎&quot;: &quot;0dced2852818c0f555e9&quot;,
              &quot;透明背景文字&quot;: &quot;d9f243ddd7dbffa341a4&quot;,
              &quot;卷脚&quot;: &quot;83b4d6bc907aa5ab576a&quot;,
              &quot;卷脚2&quot;: &quot;bc32dc20adea2261c731&quot;,
            },

            &quot;字体处理&quot;:{
              &quot;文本均分&quot;: &quot;e370ba333ae95116e212&quot;,
              &quot;断行&quot;: &quot;7eb242f4e8f078cadbca&quot;,
              &quot;隔行色&quot;: &quot;cf30f5d442533b32600d&quot;,
              &quot;代码tab数量&quot;: &quot;88c1523dfd1284950b4d&quot;,
              &quot;个性下划线&quot;: &quot;58f3d67d5bb0f8338776&quot;,
              &quot;更个性的下划线&quot;: &quot;c9184f634e9e9efde6e8&quot;,
              &quot;文本阴影&quot;: &quot;80eafefae35d26979972&quot;,
              &quot;空心文字&quot;: &quot;7a665ce85190f9cb201e&quot;,
              &quot;发光文字&quot;: &quot;4af6d5c3b22395543cb8&quot;,
              &quot;3d文字&quot;: &quot;ba8161d038b9c13b99ac&quot;,
              &quot;圆环文字&quot;: &quot;bda1bf6b0c4adbcea63d&quot;,
            },

            &quot;用户体验&quot;:{
              &quot;禁止的按钮&quot;: &quot;41c8da81742e1ab1d07f&quot;,
              &quot;扩大点击区域&quot;: &quot;df5686d4047307991f73&quot;,
              &quot;扩大点击区域&quot;: &quot;d76ac0acc80923d47106&quot;,
              &quot;复选框&quot;: &quot;e269f10328615254e29e&quot;,
              &quot;点击切换样式的按钮&quot;: &quot;fa5c622180b232043891&quot;,
              &quot;方便的遮罩&quot;: &quot;91538b2131d3545035ca&quot;,
              &quot;模糊遮罩&quot;: &quot;1326eb460b0dff91d638&quot;,
              &quot;滑动到底部顶部的提示&quot;: &quot;20205b5fcdd834461e80&quot;,
              &quot;可拖动的图片遮罩&quot;: &quot;b7e7fef7dcf9a7161a51&quot;,
            },

             &quot;动画效果&quot;:{
              &quot;弹球&quot;: &quot;1b37089310d0a5a2d8e6&quot;,
              &quot;android风&quot;: &quot;6cf33228089efef8a5ac&quot;,
              &quot;android动画&quot;: &quot;73294faf1e2bc5ff0078&quot;,
              &quot;帧动画&quot;: &quot;bcc082518391f45b41dc&quot;,
              &quot;闪烁&quot;: &quot;46fe09e5f2b97d6f282d&quot;,
              &quot;打字效果&quot;: &quot;b04ab9f41084b0a66960&quot;,
              &quot;静态播放动画&quot;: &quot;b7b53efcc2f933ca6d54&quot;,
              &quot;转动动画&quot;: &quot;87d80a51a5294ec07aea&quot;,
              &quot;转动动画2&quot;: &quot;6c647a5599dc11145f2c&quot;
             },

            &quot;弹性布局&quot;:{
              &quot;intrinsic-sizing&quot;: &quot;82eb1575806f6eff9c37&quot;,
              &quot;styling-sibling-count&quot;: &quot;70c434a6e802b062f494&quot;,
              &quot;fluid-fixed&quot;: &quot;763229b68fa27c5c1bfa&quot;,
              &quot;vertical-centering-text&quot;: &quot;00b5cd0de91a439616e8&quot;,
              &quot;vertical-centering&quot;: &quot;8aa9aa04ee57f479c513&quot;,
              &quot;vertical-centering-vh&quot;: &quot;bf12b39d8f5da2b6e5b6&quot;,
              &quot;vertical-centering-abs&quot;: &quot;cd12fac0e18bb27fb62d&quot;,
              &quot;sticky-footer-fixed&quot;: &quot;b10c3eb3b7078711a588&quot;,
              &quot;sticky-footer&quot;: &quot;410e43c60863a8dba193&quot;,
             },
           };
var content = document.querySelector('#content');
var htmlStr = '';
for(var cate in data){
  htmlStr += '&lt;h2&gt;'+cate+'&lt;/h2&gt;';
  for( var name in data[cate] ){
    htmlStr += '&lt;dd&gt;&lt;a href=&quot;http://dabblet.com/gist/'+data[cate][name]+'&quot;&gt;'+name+'&lt;/a&gt;&lt;/dd&gt;';
  }
}
content.innerHTML = htmlStr;
&lt;/script&gt;

</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/git/2017/02/15/css-example.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/git/2017/02/15/css-example.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>react配置</title>
        <description>&lt;h2 id=&quot;webpack快速入门&quot;&gt;webpack快速入门&lt;/h2&gt;
&lt;h4 id=&quot;webpack介绍&quot;&gt;webpack介绍&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Webpack是一个前端模块管理工具，有点类似browserify，出自Facebook的Instagram团队，但功能比browserify更为强大，可以说是目前最为强大的前端模块管理和打包工具。Webpack将项目中的所有静态资源都当做模块，模块之间可以互相依赖，由webpack对它们进行统一的管理和打包发布，下图为官方网站说明：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/remote/1460000004839887&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webpack对React有着与生俱来的良好支持，随着React的流行，webpack也成了React项目中必不可少的一部分。特别是随着ES6的普及，使得webpack有了更广阔的用武之地。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;安装配置webpack&quot;&gt;安装配置webpack&lt;/h2&gt;
&lt;h4 id=&quot;安装nodejs&quot;&gt;安装nodejs&lt;/h4&gt;

&lt;p&gt;安装webpack之前，需要确认本机已经安装好了nodejs。
如果还没有安装，请去&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;nodejs&lt;/a&gt;官网下载安装即可。这里使用的node版本是V4.4.1.&lt;/p&gt;
&lt;h4 id=&quot;初始化项目环境&quot;&gt;初始化项目环境&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir react_boilerplate
$ cd react_boilerplate\

$ npm init -y
Wrote to .\react_boilerplate\package.json:

{
  &quot;name&quot;: &quot;react_boilerplate&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;npm init&lt;/em&gt; 加上一个-y选项会生成一个默认的package.json,关于这个文件，不是本文重点，在此不会详述，可以参考&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;官方文档&lt;/a&gt;。可以简单的理解，这个文件是用于管理项目里面的依赖包的。&lt;/p&gt;
&lt;h4 id=&quot;设置gitignore&quot;&gt;设置.gitignore&lt;/h4&gt;
&lt;p&gt;如果我们使用git进行版本管理，一个.gitignore文件是必要的。这里我们可以先将项目需要安装的node包目录添加进去。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用npm install安装的node包都会在node_modules目录下，这个目录是不需要commit到git的。&lt;/p&gt;

&lt;h4 id=&quot;安装webpack&quot;&gt;安装webpack&lt;/h4&gt;
&lt;p&gt;安装webpack很简单，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i webpack --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中–save-dev表示该包为开发环境依赖包。安装完后会生成一个node_modules目录，并且在package.json文件中多出如下几行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;......
  &quot;devDependencies&quot;: {
    &quot;webpack&quot;: &quot;^1.13.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果写为–save则表示该包为生产环境依赖包，在package.json文件中会新增或者修改dependencies 字段。&lt;/p&gt;
&lt;h4 id=&quot;初始化项目结构和代码&quot;&gt;初始化项目结构和代码&lt;/h4&gt;
&lt;p&gt;安装完webpack后，我们可以给项目中增加一些内容了。项目的简单结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xsxyo.com1.z0.glb.clouddn.com/2016/04/29/Fq4VS1Pe2NGaTyUIkNKJCADwE-iy336.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;app目录用于存放项目代码，dist目录为编译后的项目文件，webpack.config.js为webpack的配置文件。&lt;/p&gt;

&lt;p&gt;我们给项目中的文件添加一些简单的代码，首先是组件代码：&lt;/p&gt;

&lt;p&gt;app/component.js&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = function () {
  var element = document.createElement('h1');

  element.innerHTML = 'Hello world';

  return element;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后需要一个入口文件，在入口文件中使用上面定义的组件：&lt;/p&gt;

&lt;p&gt;app/index.js&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var component = require('./component');

document.body.appendChild(component());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;配置webpack&quot;&gt;配置webpack&lt;/h4&gt;
&lt;p&gt;我们需要让webpack知道如何处理我们的项目目录结构，因此需要配置文件webpack.config.js。一个简单的配置文件如下所示：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var webpack = require('webpack'); 
var path = require('path');                 //引入node的path库

var config = {
  entry: ['./app/index.js'],                //入口文件
  output: {
    path: path.resolve(__dirname, 'dist'),  // 指定编译后的代码位置为 dist/bundle.js
    filename: 'bundle.js'
  },
  module: {
    loaders: [
      // 为webpack指定loaders
      //{ test: /\.js$/, loaders: ['babel'], exclude: /node_modules/ }   
    ]
  }
}

module.exports = config;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;到目前为止，我们已经可以让webpack工作了，在命令行执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;*这时会报错 bash: webpack: command not found
需要执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install webpack -g

$ webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*我们看到，会有一个新的文件/dist/bundle.js生成出来了。但是我们还需要一个html文件来加载编译后的代码，这就需要用到一个webpack插件：html-webpack-plugin。&lt;/p&gt;
&lt;h2 id=&quot;安装html-webpack-plugin&quot;&gt;安装html-webpack-plugin&lt;/h2&gt;
&lt;h4 id=&quot;使用如下命令安装&quot;&gt;使用如下命令安装：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install html-webpack-plugin --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后在我们的webpack.config.js中增加下面几行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins: [
    new HtmlwebpackPlugin({
      title: 'React Biolerplate by Linghucong'
    })
  ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(这个时候第一个坑.初学者不知道加在哪里.我来截图告诉你)&lt;/p&gt;

&lt;p&gt;1.首先要引入.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://newlifebegins.github.io/blog/images/1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.按照他的这一步.加在config文件里就行.记得和上一段要用”,”隔开&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://newlifebegins.github.io/blog/images/2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在在命令行下再次执行webpack命令，会看到在dist目录下生成了两个文件：bundle.js和index.html。其中index.html内容如下：&lt;/p&gt;

&lt;p&gt;dist/index.html&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;React Biolerplate by Linghucong&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;有必要提一下，如果我们安装webpack的时候使用的是全局安装选项（npm install -g webpack），可以在命令行中直接执行webpack命令；如果没有使用-g，那么要用的webpack可执行文件位于：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./node_modules/.bin/webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们可以在package.json中为此命令增加一个快捷方式：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# package.json
... other stuff
&quot;scripts&quot;: {
  &quot;build&quot;: &quot;./node_modules/.bin/webpack&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(如果不知道这段代码加在哪里请看我的截图)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://newlifebegins.github.io/blog/images/3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在就可以直接使用命令npm run build来执行webpack了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build

&amp;gt; react_boilerplate@1.0.0 build D:\node\react_boilerplate
&amp;gt; webpack

Hash: cbf754a65493b4d791d7
Version: webpack 1.13.0
Time: 919ms
     Asset       Size  Chunks             Chunk Names
 bundle.js     233 kB       0  [emitted]  main
index.html  179 bytes          [emitted]
   [0] multi main 52 bytes {0} [built]
  [75] ./app/index.js 82 bytes {0} [built]
  [76] ./app/component.js 142 bytes {0} [built]
    + 74 hidden modules
Child html-webpack-plugin for &quot;index.html&quot;:
        + 3 hidden modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装webpack-dev-server&quot;&gt;安装webpack-dev-server&lt;/h2&gt;

&lt;p&gt;webpack-dev-server可以让我们在本地启动一个web服务器，使我们更方便的查看正在开发的项目。其安装也十分简单：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i webpack-dev-server --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后在webpack.config.js文件中作如下修改：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# webpack.config.js
# ...
  entry: [
    'webpack/hot/dev-server',
    'webpack-dev-server/client?http://localhost:3000',
    './app/index.js'      //入口文件
    ],  
# ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们可以在package.json中增加webpack-dev-server的快捷方式：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# package.json
... other stuff
&quot;scripts&quot;: {
  &quot;dev&quot;: &quot;webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist&quot;,
  &quot;build&quot;: &quot;./node_modules/.bin/webpack&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;配置中指定web服务器端口号为3000，指定目录为dist。&lt;/p&gt;

&lt;p&gt;运行npm run dev：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run dev

&amp;gt; react_boilerplate@1.0.0 dev D:\node\react_boilerplate
&amp;gt; webpack-dev-server --port 3000 --devtool eval --progress --colors --hot --content-base dist

......
Time: 1109ms
     Asset       Size  Chunks             Chunk Names
 bundle.js     274 kB       0  [emitted]  main
index.html  179 bytes          [emitted]
chunk    {0} bundle.js (main) 216 kB [rendered]
    [0] multi main 52 bytes {0} [built]
 ......
 ......
 ......
   [77] ./app/component.js 142 bytes {0} [built]
Child html-webpack-plugin for &quot;index.html&quot;:
    chunk    {0} index.html 505 kB [rendered]
        [0] ./~/html-webpack-plugin/lib/loader.js!./~/html-webpack-plugin/default_index.ejs 540 bytes {0} [buil
t]
        [1] ./~/lodash/lodash.js 504 kB {0} [built]
        [2](webpack)/buildin/module.js 251 bytes {0} [built]
webpack: bundle is now VALID.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;web服务器启动完毕，此时访问 http://localhost:3000/ 就可以看到我们的“Hello world”了。&lt;/p&gt;

&lt;p&gt;这时如果报错就把webpack.config.js中的entry去掉&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/remote/1460000005037312&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要特别说明的是，webpack-dev-server是支持热加载的，也就是说我们对代码的改动，保存的时候会自动更新页面。比如我们在文件中将“Hello world”改为“Linghucong”，会看到页面实时更新了，无须再按F5刷新，爽吧？！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/remote/1460000005037314&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;webpack-dev-server的配置还可以放在webpack.config.js中，需要使用一个devServer属性，详细可以&lt;a href=&quot;https://webpack.github.io/docs/webpack-dev-server.html&quot;&gt;参考官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;处理css样式&quot;&gt;处理CSS样式&lt;/h2&gt;

&lt;p&gt;项目中使用CSS是必不可少的。webpack中使用&lt;/p&gt;

&lt;p&gt;loader的方式来处理各种各样的资源，根据设定的规则，会找到相应的文件路径，然后使用各自的loader来处理。CSS文件也需要特定的loader，一般需要使用两个：css-loader和 style-loader，如果使用LESS或者SASS还需要加载对应的loader。这里我们使用LESS，因此安装loaders:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install css-loader style-loader less-loader --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;踩坑提醒&quot;&gt;踩坑提醒&lt;/h4&gt;

&lt;p&gt;npm3.0以上需要单独安装less：npm install less –save-dev。&lt;/p&gt;

&lt;p&gt;然后在文件webpack.config.js中配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	test: /\.less$/,
	loaders: ['style-loader', 'css-loader', 'less-loader'],
	include: path.resolve(__dirname, 'app')
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到，test里面包含一个正则，包含需要匹配的文件，loaders是一个数组，包含要处理这些文件的loaders，注意loaders的执行顺序是从右到左的。&lt;/p&gt;

&lt;p&gt;新建一个LESS文件/app/index.less，其内容如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 {
    color: green;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在入口文件index.js中引入这个文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require('./index.less');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后运行webpack进行编译：npm run build:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build

&amp;gt; react_boilerplate@1.0.0 build D:\node\react_boilerplate
&amp;gt; webpack

Hash: 0c25c4bacdc334db1e04
Version: webpack 1.13.0
Time: 1902ms
     Asset       Size  Chunks             Chunk Names
 bundle.js     243 kB       0  [emitted]  main
index.html  179 bytes          [emitted]
   [0] multi main 52 bytes {0} [built]
  [75] ./app/index.js 110 bytes {0} [built]
  [80] ./app/component.js 141 bytes {0} [built]
    + 78 hidden modules
Child html-webpack-plugin for &quot;index.html&quot;:
        + 3 hidden modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到， http://localhost:3000/ 页面上的文字已经变成绿色了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/remote/1460000005037316&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到目前为止的代码可以在react_boilerplate _v1中查看。&lt;/p&gt;

&lt;h2 id=&quot;webpack-支持es6&quot;&gt;webpack 支持ES6&lt;/h2&gt;
&lt;h4 id=&quot;javascript包管理格式&quot;&gt;Javascript包管理格式&lt;/h4&gt;
&lt;h5 id=&quot;commonjs&quot;&gt;CommonJS&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//CommonJS 定义的是模块的同步加载，主要用于NodeJS

var MyModule = require('./MyModule');

// export at module root
module.exports = function() { ... };

// alternatively, export individual functions
exports.hello = function() {...};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;amd&quot;&gt;AMD&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//AMD 是异步加载，比如require.js使用这种规范
define(['./MyModule.js'], function (MyModule) {
  // export at module root
  return function() {};
});

// or
define(['./MyModule.js'], function (MyModule) {
  // export as module function
  return {
    hello: function() {...}
  };
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;es6&quot;&gt;ES6&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//ES6 变得越来越主流了

import MyModule from './MyModule.js';

// export at module root
export default function () { ... };

// or export as module function,
// you can have multiple of these per module
export function hello() {...};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还有其他格式如UMD、CMD等，在此不再一一介绍。webpack对这些模块格式都可以很好的支持。在我们之前的项目中使用的是CommonJS格式的模块管理，但是随着ES6的普及和应用，同时得益于强大的Babel的存在，使我们可以方便的使用ES6的语法，而不必考虑浏览器支持的问题。&lt;/p&gt;
&lt;h4 id=&quot;webpack支持es6语法&quot;&gt;webpack支持ES6语法&lt;/h4&gt;

&lt;p&gt;在webpack中支持ES6同样只需要安装配置相应的loader就可以了。&lt;/p&gt;

&lt;p&gt;安装如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在webpack.config.js中添加loader如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ 
	test: /\.jsx?$/, 
	loader: 'babel', 
	exclude: /node_modules/,
	query: {
	  presets: ['react', 'es2015'] 
	}
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于后边需要支持React的jsx文件，所以我们在这里安装了babel-preset-react。&lt;/p&gt;

&lt;p&gt;顺便提一下，我们可以在项目根目录下创建一个.babelrc文件，将loader中的presets放在文件.babelrc中：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# .babelrc
{
  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;此时我们运行npm run build，正常编译后，使用npm run dev，启动web服务器，打开 http://localhost:3000/ 可以看到页面已经可以正常显示了。&lt;/p&gt;

&lt;p&gt;踩坑提醒&lt;/p&gt;

&lt;p&gt;如果上面对于loader的配置写为（注意这里是loaders不是loader）：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ 
    test: /\.jsx?$/, 
    loaders: ['babel'], 
    exclude: /node_modules/,
    query: {
      presets: ['es2015', 'react'] 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;则可能会出现这样的错误：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm run build

&amp;gt; react_boilerplate@1.0.0 build D:\node\react_boilerplate
&amp;gt; webpack

D:\node\react_boilerplate\node_modules\webpack-core\lib\LoadersList.js:54
                if(!element.loader || element.loader.indexOf(&quot;!&quot;) &amp;gt;= 0) throw new Error(&quot;Cannot define 'query' and multiple loaders in loaders list&quot;);
                                                                        ^

Error: Cannot define 'query' and multiple loaders in loaders list
    at getLoadersFromObject (D:\node\react_boilerplate\node_modules\webpack-core\lib\LoadersList.js:54:65)
    at LoadersList. (D:\node\react_boilerplate\node_modules\webpack-core\lib\LoadersList.js:78:12)
    at Array.map (native)
    at LoadersList.match 
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;原因是使用了多个loader，而query仅仅作用于babel-loader。如果非要使用loaders加载多个loader，可以做如下修改：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var babelPresets = {presets: ['react', 'es2015']};
......
loaders: ['other-loader', 'babel-loader?'+JSON.stringify(babelPresets)]
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;到目前为止的代码可以在react_boilerplate _v2中查看。&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2017/02/14/react.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/02/14/react.html</guid>
        
        
      </item>
    
  </channel>
</rss>
